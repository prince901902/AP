dp:
construct the array: 
int mod = 1e9+7;

long countArray(int n, int k, int x) {
      long a[n],b[n];
      a[0]= x==1?1:0;   
      b[0]= x==1?0:1;
   
      for(int i=1;i<n;i++){                                  
        a[i]= b[i-1]%mod;
        b[i]= (a[i-1]*(k-1) + b[i-1]*(k-2) )%mod;    
    }
    return a[n-1];

}

Equal:
int equal(vector<int> arr) {
     int mn = INT_MAX;
    for (int i = 0; i < arr.size(); i++) mn = min(mn, arr[i]);
    int k, ope, ans = INT_MAX;
    for (int j = 0; j < 5; j++){
        ope = 0;
        for (int i = 0; i < arr.size(); i++){
            k = arr[i] - mn;
            ope += (k / 5) + (k % 5) / 2 + (k % 5) % 2;
        }
        ans = min(ans, ope);
        mn--;
    }
    return ans;
}

Experiment 1.1

Hourglass Sum: 

int hourglassSum(vector<vector<int>> arr) {
    vector<vector<int>> hg(6, vector<int>(6, 0));
    
    for(int i=0; i<6; i++){
        for(int j=0; j<6; j++){
            if(j+2 >= 6 || i+2 >= 6) hg[i][j] = INT_MIN;
        }
    }
    
    for(int i=0; i<6; i++){
        for(int j=0; j<6; j++){
            if(j+2 >= 6 || i+2 >= 6) break;;
            for(int k=j; k<j+3; k++){
                if(k<6){
                    hg[i][j] = hg[i][j] + arr[i][k];
                    if(i+2 < 6){
                        hg[i][j] += arr[i+2][k];
                    }
                }
            }
            if(i+1 < 6 && j+1 < 6){
                hg[i][j] += arr[i+1][j+1];
            }
        }
    }
    
    int maxi = INT_MIN;
    for(int i=0; i<6; i++){
        for(int j=0; j<6; j++){
            // cout<<hg[i][j]<<" ";
            maxi = max(maxi, hg[i][j]);
        }
        cout<<endl;
    }
    
    return maxi;

}


Exp 1.2:

Equal Stack:

int equalStacks(vector<int> h1, vector<int> h2, vector<int> h3) {
    int s1 = 0, s2 = 0, s3 = 0;
    for(auto it:h1) s1 += it;   for(auto it:h2) s2 += it;   for(auto it:h3) s3 += it;
    priority_queue<pair<int, pair<int, int>>> pq;
    pq.push({s1, {1, 0}}); pq.push({s2, {2, 0}});  pq.push({s3, {3, 0}});
    
    while(s1!=s2 || s2 != s3 ){
        pair<int, pair<int, int>> p = pq.top();
        pq.pop();
        int st = p.second.first;
        int ind = p.second.second;
        if(st == 1){
            s1 -= h1[ind];
            pq.push({s1, {1, ind+1}});
        }
        else if(st == 2){
            s2 -= h2[ind];
            pq.push({s2, {2, ind+1}});
        }
        else{
            s3 -= h3[ind];
            pq.push({s3, {3, ind+1}});
        }
    }
    
    return s1;
}

Game of Two stack:

int twoStacks(int maxSum, vector<int> a, vector<int> b) {
   int m = a.size(), n = b.size();
   int ind1 = 0;
   int ans = 0;
   while(ind1 != m && a[ind1]<=maxSum){
       maxSum -= a[ind1];
       ind1++;
   }
   ans = max(ans, ind1);
   ind1--;
   
   int ind2 = 0;
   while(ind2 != n && b[ind2] <= maxSum){
       maxSum -= b[ind2];
       ind2++;
       ans++;
   }
   int temp = ans;
   while(ind1 >= 0){
       maxSum += a[ind1];
       ind1--;
       temp--;
       while(ind2!=n && b[ind2] <= maxSum){
           maxSum -= b[ind2];
           ind2++;
           temp++;
       }
       ans = max(temp, ans);
   }
   
   return ans;
}

Down to zero ii 
int downToZero(int n) {
     if(n<=3)
        return n;
    queue< pair<int, int> > q;
    q.push({n, 0});
    int d;
    while(!q.empty()){
        n = q.front().first;
        d = q.front().second;
        q.pop();
        if(n == 2){
            return d+2;
        }
        q.push({n-1, d+1});
        int i = 2;
        while(i*i<=n){
            if(n%i == 0){
                q.push({max(i, n/i), d+1});
            }
            i++;
        }
        
    }
    return -1;
}


Truck Tour : 

int truckTour(vector<vector<int>> petrolpumps) {
   int n = petrolpumps.size();
    for (int i = 0; i < n; i++)
    {
        int petrol = 0;
        int index = i;
        if (petrolpumps[i][0] < petrolpumps[i][1])
            continue;
        while (true)
        {
            petrol += petrolpumps[index][0];
            petrol -= petrolpumps[index][1];
            if(petrol < 0)
                break;
            index = (index + 1)%n;
            if(index == i)
                break;
        }
        if (index == i)
            return i;
    }
    return -1;
    
}

Experimient 1.4 

Fraudelent activity notification

int activityNotifications(vector<int> expenditure, int d) {
    vector<int> temp;
    for(int i=0; i<d; i++){
        temp.push_back(expenditure[i]);
    }
    sort(temp.begin(), temp.end());
    int count = 0;
    for(int i=d; i<expenditure.size(); i++){
         float median;
        if(d%2 == 0){
            median = (float)(temp[(d/2)-1]+temp[d/2])/2;
        }
        else {
            median = temp[d/2];
        }
        // cout<<median<<" ";
        if(expenditure[i] >= 2*median){
            count++;
        }
        
        auto it1 = lower_bound(temp.begin(), temp.end(), expenditure[i-d]);
        temp.erase(it1);
        
        auto it2= lower_bound(temp.begin(), temp.end(), expenditure[i]);
        temp.insert(it2, expenditure[i]);       
    }
    
    return count;
}

Missing number :

vector<int> missingNumbers(vector<int> arr, vector<int> brr) {
    unordered_map<int, int> m;
    for(int i=0; i<arr.size(); i++){
        m[arr[i]]++;
    }
    
    unordered_set<int> s;
    for(int i=0; i<brr.size(); i++){
        if(m[brr[i]] == 0){
            s.insert(brr[i]);
            cout<<brr[i]<<" ";
        }
        else{
            m[brr[i]]--;
        }
    }
    
    vector<int> ans;
    for(auto it:s){
        ans.push_back(it);
    }
    sort(ans.begin(), ans.end());
    
    return ans;
}

Experiment 2.1

BFS : Shortest Reach

vector<int> bfs(int n, int m, vector<vector<int>> edges, int s) {
    vector<int> adj[n+1];
    for(int i=0; i<m; i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    vector<bool> visited(n+1, false);
    queue<pair<int, int>> q;
    q.push({s, 0});
    visited[s] = true;
    unordered_map<int, int> mp;
    while(!q.empty()){
        int curr = q.front().first;
        int dist = q.front().second;
        q.pop();
        
        for(auto it:adj[curr]){
            if(!visited[it]){
             int nd =  dist + 6;
             visited[it] = true;
             q.push({it, nd});
             mp[it] = nd;
            }
        }
    }
    
    vector<int> ans;
    for(int i=1; i<=n; i++){
        if(i==s){
            continue;
        }
        if(mp[i] > 0){
            ans.push_back(mp[i]);
        }
        else{
            ans.push_back(-1);
        }
    }
    
    return ans;
}

Even Tree: 

int ans = 0;

int dfs(int src, vector<bool>& vis, vector<int> adj[]){
    int count = 0;
    vis[src] = true;
    for(auto it:adj[src]){
        if(!vis[it])  {
          int cnt = dfs(it, vis, adj);
          if(cnt%2 == 0){
              ans++;
          } 
          count += cnt; 
        } 
    }
    return count+1;
}

// Complete the evenForest function below.
int evenForest(int t_nodes, int t_edges, vector<int> t_from, vector<int> t_to) {
    vector<int> adj[t_nodes+1];
    for(int i=0; i<t_edges; i++){
        adj[t_from[i]].push_back(t_to[i]);
        adj[t_to[i]].push_back(t_from[i]);
    }
    // int ans = 0;
    vector<bool> vis(t_nodes+1, false);
    vis[1] = true;
    for(auto it:adj[1]){
      if(!vis[it]){
          int cnt = dfs(it, vis, adj);
        // cout<<cnt<<" ";
        if(cnt%2 == 0){
            ans++;
        }
      }
        
    }
    return ans;
}


Top View:

    void topView(Node * root) {
         
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        map<int, int> m;
        
        while(!q.empty()){
            int levelSize = q.size();
            while(levelSize--){
                Node* curr = q.front().first;
                int pos = q.front().second;
                q.pop();
                if(m[pos] == 0){
                    m[pos] = curr->data;
                }
                if(curr->left != NULL){
                    q.push({curr->left, pos-1});
                }
                if(curr->right != NULL){
                    q.push({curr->right, pos+1});
                }
            }
        }
        
        
        for(auto it:m){
            cout<<it.second<<" ";
        }
        
        return;
    }

BST insertion: 

 Node * insert(Node * root, int data) {
        if(root == NULL){
            Node* curr = new Node(data);
            curr->data = data;
            return curr;
        }
        
        Node* curr = root;
        Node* prev = NULL;
        while(curr != NULL){
            prev = curr;
            if(data >= curr->data){
                curr = curr->right;
            }
            else{
                curr = curr->left;
            }
        }
        if(prev->left == NULL && data <= prev->data){
            Node* curr = new Node(data);
            curr->data = data;
            prev->left = curr;
        }
        else if(prev->right == NULL){
            Node* curr = new Node(data);
            curr->data = data;
            prev->right = curr;
        }
        
        return root;
    }


Exp 2.3 : 

string pangrams(string s) {
    unordered_map<char, int> m;
    int ans = 0;
    for(int i=0; i<s.size(); i++){
        if(s[i] >= 'a' && s[i] <= 'z'){
            char ch = toupper(s[i]);
            cout<<ch<<" ";
            if(m[ch] > 0 || m[ch] > 0){
                continue;
            }
            else{
                m[ch]++;
                ans++;
            }
        }
        else if(s[i] >= 'A' && s[i] <= 'Z'){
            // char ch = tolower(s[i]);
            char ch = s[i];
            if(m[s[i]] > 0 || m[ch] > 0){
                continue;
            }
            else{
                m[s[i]]++;
                ans++;
            }
        }
    }
    
    cout<<ans<<endl;
    return ans == 26 ? "pangram" : "not pangram";
}

Camel Case:

int camelcase(string s) {
    int n = s.size();
    int count = 1;
    for(int i=0; i<n; i++){
        if(s[i] >= 'A' && s[i] <= 'Z'){
            count++;
        }
    }
    
    return count;
}









